//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GGPMockBootstrapper.GamesInformationService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameInfo", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Contracts")]
    [System.SerializableAttribute()]
    public partial class GameInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged{
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FriendlyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GameEngineAssemblyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GameEngineTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GameEngineVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] GameGroupsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GameLogicXmlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GameTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GameUniqueNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GameVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HandlersPoolSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsISDInUseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSubGameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OperatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ProtocolAssembliesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FriendlyName {
            get {
                return this.FriendlyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FriendlyNameField, value) != true)) {
                    this.FriendlyNameField = value;
                    this.RaisePropertyChanged("FriendlyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GameEngineAssemblyName {
            get {
                return this.GameEngineAssemblyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GameEngineAssemblyNameField, value) != true)) {
                    this.GameEngineAssemblyNameField = value;
                    this.RaisePropertyChanged("GameEngineAssemblyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GameEngineTypeName {
            get {
                return this.GameEngineTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GameEngineTypeNameField, value) != true)) {
                    this.GameEngineTypeNameField = value;
                    this.RaisePropertyChanged("GameEngineTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GameEngineVersion {
            get {
                return this.GameEngineVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.GameEngineVersionField, value) != true)) {
                    this.GameEngineVersionField = value;
                    this.RaisePropertyChanged("GameEngineVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] GameGroups {
            get {
                return this.GameGroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.GameGroupsField, value) != true)) {
                    this.GameGroupsField = value;
                    this.RaisePropertyChanged("GameGroups");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GameLogicXml {
            get {
                return this.GameLogicXmlField;
            }
            set {
                if ((object.ReferenceEquals(this.GameLogicXmlField, value) != true)) {
                    this.GameLogicXmlField = value;
                    this.RaisePropertyChanged("GameLogicXml");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GameType {
            get {
                return this.GameTypeField;
            }
            set {
                if ((this.GameTypeField.Equals(value) != true)) {
                    this.GameTypeField = value;
                    this.RaisePropertyChanged("GameType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GameUniqueName {
            get {
                return this.GameUniqueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GameUniqueNameField, value) != true)) {
                    this.GameUniqueNameField = value;
                    this.RaisePropertyChanged("GameUniqueName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GameVersion {
            get {
                return this.GameVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.GameVersionField, value) != true)) {
                    this.GameVersionField = value;
                    this.RaisePropertyChanged("GameVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HandlersPoolSize {
            get {
                return this.HandlersPoolSizeField;
            }
            set {
                if ((this.HandlersPoolSizeField.Equals(value) != true)) {
                    this.HandlersPoolSizeField = value;
                    this.RaisePropertyChanged("HandlersPoolSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsISDInUse {
            get {
                return this.IsISDInUseField;
            }
            set {
                if ((this.IsISDInUseField.Equals(value) != true)) {
                    this.IsISDInUseField = value;
                    this.RaisePropertyChanged("IsISDInUse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSubGame {
            get {
                return this.IsSubGameField;
            }
            set {
                if ((this.IsSubGameField.Equals(value) != true)) {
                    this.IsSubGameField = value;
                    this.RaisePropertyChanged("IsSubGame");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OperatorId {
            get {
                return this.OperatorIdField;
            }
            set {
                if ((this.OperatorIdField.Equals(value) != true)) {
                    this.OperatorIdField = value;
                    this.RaisePropertyChanged("OperatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ProtocolAssemblies {
            get {
                return this.ProtocolAssembliesField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtocolAssembliesField, value) != true)) {
                    this.ProtocolAssembliesField = value;
                    this.RaisePropertyChanged("ProtocolAssemblies");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GamesInformationService.IGamesInformationService")]
    public interface IGamesInformationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamesInformationService/GetAllGames", ReplyAction="http://tempuri.org/IGamesInformationService/GetAllGamesResponse")]
        GGPMockBootstrapper.GamesInformationService.GameInfo[] GetAllGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamesInformationService/GetGame", ReplyAction="http://tempuri.org/IGamesInformationService/GetGameResponse")]
        GGPMockBootstrapper.GamesInformationService.GameInfo[] GetGame(long gameType);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGamesInformationServiceChannel : GGPMockBootstrapper.GamesInformationService.IGamesInformationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GamesInformationServiceClient : System.ServiceModel.ClientBase<GGPMockBootstrapper.GamesInformationService.IGamesInformationService>, GGPMockBootstrapper.GamesInformationService.IGamesInformationService {
        
        public GamesInformationServiceClient() {
        }
        
        public GamesInformationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GamesInformationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GamesInformationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GamesInformationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GGPMockBootstrapper.GamesInformationService.GameInfo[] GetAllGames() {
            return base.Channel.GetAllGames();
        }
        
        public GGPMockBootstrapper.GamesInformationService.GameInfo[] GetGame(long gameType) {
            return base.Channel.GetGame(gameType);
        }
    }
}
