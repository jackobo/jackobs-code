//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GGPMockBootstrapper.ToolService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RNGTypes", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Core")]
    public enum RNGTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RandomNumbers = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FrenchRoulette = 130004,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AmericanRoulette = 130006,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Shuffle = 130007,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IterationsPerCallLimits", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Core")]
    public enum IterationsPerCallLimits : uint {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RandomNumbers_MAX_IterationsPerCall = 1000000,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Roulette_MAX_IterationsPerCall = 1000000,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Shuffle_MAX_IterationsPerCall = 1000,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoundNums", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Core")]
    [System.SerializableAttribute()]
    public partial class RoundNums : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint[] RndNumbersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint[] RndNumbers {
            get {
                return this.RndNumbersField;
            }
            set {
                if ((object.ReferenceEquals(this.RndNumbersField, value) != true)) {
                    this.RndNumbersField = value;
                    this.RaisePropertyChanged("RndNumbers");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseResponse", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Core")]
    [System.SerializableAttribute()]
    public partial class BaseResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorDescriptionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDescription {
            get {
                return this.ErrorDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDescriptionField, value) != true)) {
                    this.ErrorDescriptionField = value;
                    this.RaisePropertyChanged("ErrorDescription");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ToolService.IToolService")]
    public interface IToolService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToolService/GetServerVersion", ReplyAction="http://tempuri.org/IToolService/GetServerVersionResponse")]
        string GetServerVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToolService/GetCurrentGameID", ReplyAction="http://tempuri.org/IToolService/GetCurrentGameIDResponse")]
        long GetCurrentGameID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToolService/GetCurrentGGPHistoryPending", ReplyAction="http://tempuri.org/IToolService/GetCurrentGGPHistoryPendingResponse")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="gameString")]
        int GetCurrentGGPHistoryPending();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToolService/GetCurrentPlayers", ReplyAction="http://tempuri.org/IToolService/GetCurrentPlayersResponse")]
        long GetCurrentPlayers();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IToolServiceChannel : GGPMockBootstrapper.ToolService.IToolService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ToolServiceClient : System.ServiceModel.ClientBase<GGPMockBootstrapper.ToolService.IToolService>, GGPMockBootstrapper.ToolService.IToolService {
        
        public ToolServiceClient() {
        }
        
        public ToolServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ToolServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ToolServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ToolServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetServerVersion() {
            return base.Channel.GetServerVersion();
        }
        
        public long GetCurrentGameID() {
            return base.Channel.GetCurrentGameID();
        }
        
        public int GetCurrentGGPHistoryPending() {
            return base.Channel.GetCurrentGGPHistoryPending();
        }
        
        public long GetCurrentPlayers() {
            return base.Channel.GetCurrentPlayers();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ToolService.IRNG")]
    public interface IRNG {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRNG/GetRndNum", ReplyAction="http://tempuri.org/IRNG/GetRndNumResponse")]
        uint GetRndNum();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRNG/GetRndNums", ReplyAction="http://tempuri.org/IRNG/GetRndNumsResponse")]
        uint[] GetRndNums(uint count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRNG/GetLongRndNums", ReplyAction="http://tempuri.org/IRNG/GetLongRndNumsResponse")]
        ulong[] GetLongRndNums(uint count, ulong range);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRNG/GetFrenchRouletteRnd", ReplyAction="http://tempuri.org/IRNG/GetFrenchRouletteRndResponse")]
        uint[] GetFrenchRouletteRnd(uint count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRNG/GetAmericanRouletteRnd", ReplyAction="http://tempuri.org/IRNG/GetAmericanRouletteRndResponse")]
        uint[] GetAmericanRouletteRnd(uint count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRNG/GetLimitForRNGType", ReplyAction="http://tempuri.org/IRNG/GetLimitForRNGTypeResponse")]
        GGPMockBootstrapper.ToolService.IterationsPerCallLimits GetLimitForRNGType(GGPMockBootstrapper.ToolService.RNGTypes type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRNG/GetShuffle", ReplyAction="http://tempuri.org/IRNG/GetShuffleResponse")]
        GGPMockBootstrapper.ToolService.RoundNums[] GetShuffle(uint maxRange, uint count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRNG/BC_GenerateRandomNumbers", ReplyAction="http://tempuri.org/IRNG/BC_GenerateRandomNumbersResponse")]
        int BC_GenerateRandomNumbers(uint count);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRNGChannel : GGPMockBootstrapper.ToolService.IRNG, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RNGClient : System.ServiceModel.ClientBase<GGPMockBootstrapper.ToolService.IRNG>, GGPMockBootstrapper.ToolService.IRNG {
        
        public RNGClient() {
        }
        
        public RNGClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RNGClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RNGClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RNGClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public uint GetRndNum() {
            return base.Channel.GetRndNum();
        }
        
        public uint[] GetRndNums(uint count) {
            return base.Channel.GetRndNums(count);
        }
        
        public ulong[] GetLongRndNums(uint count, ulong range) {
            return base.Channel.GetLongRndNums(count, range);
        }
        
        public uint[] GetFrenchRouletteRnd(uint count) {
            return base.Channel.GetFrenchRouletteRnd(count);
        }
        
        public uint[] GetAmericanRouletteRnd(uint count) {
            return base.Channel.GetAmericanRouletteRnd(count);
        }
        
        public GGPMockBootstrapper.ToolService.IterationsPerCallLimits GetLimitForRNGType(GGPMockBootstrapper.ToolService.RNGTypes type) {
            return base.Channel.GetLimitForRNGType(type);
        }
        
        public GGPMockBootstrapper.ToolService.RoundNums[] GetShuffle(uint maxRange, uint count) {
            return base.Channel.GetShuffle(maxRange, count);
        }
        
        public int BC_GenerateRandomNumbers(uint count) {
            return base.Channel.BC_GenerateRandomNumbers(count);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ToolService.ISupportService")]
    public interface ISupportService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupportService/UnLockGameSession", ReplyAction="http://tempuri.org/ISupportService/UnLockGameSessionResponse")]
        GGPMockBootstrapper.ToolService.BaseResponse UnLockGameSession(long GGPPlayerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupportService/ForceCloseSession", ReplyAction="http://tempuri.org/ISupportService/ForceCloseSessionResponse")]
        GGPMockBootstrapper.ToolService.BaseResponse ForceCloseSession(long GGPPlayerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupportService/AutoplaySession", ReplyAction="http://tempuri.org/ISupportService/AutoplaySessionResponse")]
        GGPMockBootstrapper.ToolService.BaseResponse AutoplaySession(long GGPPlayerID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISupportServiceChannel : GGPMockBootstrapper.ToolService.ISupportService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SupportServiceClient : System.ServiceModel.ClientBase<GGPMockBootstrapper.ToolService.ISupportService>, GGPMockBootstrapper.ToolService.ISupportService {
        
        public SupportServiceClient() {
        }
        
        public SupportServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SupportServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SupportServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SupportServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GGPMockBootstrapper.ToolService.BaseResponse UnLockGameSession(long GGPPlayerID) {
            return base.Channel.UnLockGameSession(GGPPlayerID);
        }
        
        public GGPMockBootstrapper.ToolService.BaseResponse ForceCloseSession(long GGPPlayerID) {
            return base.Channel.ForceCloseSession(GGPPlayerID);
        }
        
        public GGPMockBootstrapper.ToolService.BaseResponse AutoplaySession(long GGPPlayerID) {
            return base.Channel.AutoplaySession(GGPPlayerID);
        }
    }
}
