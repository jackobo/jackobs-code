//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GGPMockBootstrapper.OpenSessionProviderService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetOpenSessionRequest", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock")]
    [System.SerializableAttribute()]
    public partial class GetOpenSessionRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OperatorIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CID {
            get {
                return this.CIDField;
            }
            set {
                if ((this.CIDField.Equals(value) != true)) {
                    this.CIDField = value;
                    this.RaisePropertyChanged("CID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OperatorID {
            get {
                return this.OperatorIDField;
            }
            set {
                if ((this.OperatorIDField.Equals(value) != true)) {
                    this.OperatorIDField = value;
                    this.RaisePropertyChanged("OperatorID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetOpenSessionResponse", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock")]
    [System.SerializableAttribute()]
    public partial class GetOpenSessionResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BankrollBalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GGPMockBootstrapper.OpenSessionProviderService.FreePlayMockData FreePlayMockDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GameCurrencyCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GameStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GameStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GameTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long PlayerSessionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RegulationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SessionObjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubGameStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SubGameTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeStampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BankrollBalance {
            get {
                return this.BankrollBalanceField;
            }
            set {
                if ((this.BankrollBalanceField.Equals(value) != true)) {
                    this.BankrollBalanceField = value;
                    this.RaisePropertyChanged("BankrollBalance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GGPMockBootstrapper.OpenSessionProviderService.FreePlayMockData FreePlayMockData {
            get {
                return this.FreePlayMockDataField;
            }
            set {
                if ((object.ReferenceEquals(this.FreePlayMockDataField, value) != true)) {
                    this.FreePlayMockDataField = value;
                    this.RaisePropertyChanged("FreePlayMockData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GameCurrencyCode {
            get {
                return this.GameCurrencyCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.GameCurrencyCodeField, value) != true)) {
                    this.GameCurrencyCodeField = value;
                    this.RaisePropertyChanged("GameCurrencyCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GameState {
            get {
                return this.GameStateField;
            }
            set {
                if ((object.ReferenceEquals(this.GameStateField, value) != true)) {
                    this.GameStateField = value;
                    this.RaisePropertyChanged("GameState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GameString {
            get {
                return this.GameStringField;
            }
            set {
                if ((object.ReferenceEquals(this.GameStringField, value) != true)) {
                    this.GameStringField = value;
                    this.RaisePropertyChanged("GameString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GameType {
            get {
                return this.GameTypeField;
            }
            set {
                if ((this.GameTypeField.Equals(value) != true)) {
                    this.GameTypeField = value;
                    this.RaisePropertyChanged("GameType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long PlayerSessionID {
            get {
                return this.PlayerSessionIDField;
            }
            set {
                if ((this.PlayerSessionIDField.Equals(value) != true)) {
                    this.PlayerSessionIDField = value;
                    this.RaisePropertyChanged("PlayerSessionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RegulationId {
            get {
                return this.RegulationIdField;
            }
            set {
                if ((this.RegulationIdField.Equals(value) != true)) {
                    this.RegulationIdField = value;
                    this.RaisePropertyChanged("RegulationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SessionObject {
            get {
                return this.SessionObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionObjectField, value) != true)) {
                    this.SessionObjectField = value;
                    this.RaisePropertyChanged("SessionObject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubGameString {
            get {
                return this.SubGameStringField;
            }
            set {
                if ((object.ReferenceEquals(this.SubGameStringField, value) != true)) {
                    this.SubGameStringField = value;
                    this.RaisePropertyChanged("SubGameString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SubGameType {
            get {
                return this.SubGameTypeField;
            }
            set {
                if ((this.SubGameTypeField.Equals(value) != true)) {
                    this.SubGameTypeField = value;
                    this.RaisePropertyChanged("SubGameType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeStamp {
            get {
                return this.TimeStampField;
            }
            set {
                if ((this.TimeStampField.Equals(value) != true)) {
                    this.TimeStampField = value;
                    this.RaisePropertyChanged("TimeStamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FreePlayMockData", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock")]
    [System.SerializableAttribute()]
    public partial class FreePlayMockData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] AlternativeGamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExpirationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> FreePlayIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GGPMockBootstrapper.OpenSessionProviderService.FreePlayStateMock FreePlayStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FreePlayTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] GamesTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long MaxBetAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> MaxWinningCapField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TotalWinningsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] AlternativeGames {
            get {
                return this.AlternativeGamesField;
            }
            set {
                if ((object.ReferenceEquals(this.AlternativeGamesField, value) != true)) {
                    this.AlternativeGamesField = value;
                    this.RaisePropertyChanged("AlternativeGames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExpirationDate {
            get {
                return this.ExpirationDateField;
            }
            set {
                if ((this.ExpirationDateField.Equals(value) != true)) {
                    this.ExpirationDateField = value;
                    this.RaisePropertyChanged("ExpirationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> FreePlayID {
            get {
                return this.FreePlayIDField;
            }
            set {
                if ((this.FreePlayIDField.Equals(value) != true)) {
                    this.FreePlayIDField = value;
                    this.RaisePropertyChanged("FreePlayID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GGPMockBootstrapper.OpenSessionProviderService.FreePlayStateMock FreePlayState {
            get {
                return this.FreePlayStateField;
            }
            set {
                if ((object.ReferenceEquals(this.FreePlayStateField, value) != true)) {
                    this.FreePlayStateField = value;
                    this.RaisePropertyChanged("FreePlayState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FreePlayType {
            get {
                return this.FreePlayTypeField;
            }
            set {
                if ((this.FreePlayTypeField.Equals(value) != true)) {
                    this.FreePlayTypeField = value;
                    this.RaisePropertyChanged("FreePlayType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] GamesTypes {
            get {
                return this.GamesTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.GamesTypesField, value) != true)) {
                    this.GamesTypesField = value;
                    this.RaisePropertyChanged("GamesTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MaxBetAmount {
            get {
                return this.MaxBetAmountField;
            }
            set {
                if ((this.MaxBetAmountField.Equals(value) != true)) {
                    this.MaxBetAmountField = value;
                    this.RaisePropertyChanged("MaxBetAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> MaxWinningCap {
            get {
                return this.MaxWinningCapField;
            }
            set {
                if ((this.MaxWinningCapField.Equals(value) != true)) {
                    this.MaxWinningCapField = value;
                    this.RaisePropertyChanged("MaxWinningCap");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalWinnings {
            get {
                return this.TotalWinningsField;
            }
            set {
                if ((this.TotalWinningsField.Equals(value) != true)) {
                    this.TotalWinningsField = value;
                    this.RaisePropertyChanged("TotalWinnings");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FreePlayStateMock", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock")]
    [System.SerializableAttribute()]
    public partial class FreePlayStateMock : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoadDisconnectionRequest", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock")]
    [System.SerializableAttribute()]
    public partial class LoadDisconnectionRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long PlayerSessionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SessionObjectField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long PlayerSessionID {
            get {
                return this.PlayerSessionIDField;
            }
            set {
                if ((this.PlayerSessionIDField.Equals(value) != true)) {
                    this.PlayerSessionIDField = value;
                    this.RaisePropertyChanged("PlayerSessionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SessionObject {
            get {
                return this.SessionObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionObjectField, value) != true)) {
                    this.SessionObjectField = value;
                    this.RaisePropertyChanged("SessionObject");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OpenSessionProviderService.IGGPMockOpenSessionProviderService")]
    public interface IGGPMockOpenSessionProviderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGGPMockOpenSessionProviderService/GetOpenSessions", ReplyAction="http://tempuri.org/IGGPMockOpenSessionProviderService/GetOpenSessionsResponse")]
        GGPMockBootstrapper.OpenSessionProviderService.GetOpenSessionResponse[] GetOpenSessions(GGPMockBootstrapper.OpenSessionProviderService.GetOpenSessionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGGPMockOpenSessionProviderService/LoadDisconnection", ReplyAction="http://tempuri.org/IGGPMockOpenSessionProviderService/LoadDisconnectionResponse")]
        void LoadDisconnection(GGPMockBootstrapper.OpenSessionProviderService.LoadDisconnectionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGGPMockOpenSessionProviderService/GetOptions", ReplyAction="http://tempuri.org/IGGPMockOpenSessionProviderService/GetOptionsResponse")]
        void GetOptions();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGGPMockOpenSessionProviderServiceChannel : GGPMockBootstrapper.OpenSessionProviderService.IGGPMockOpenSessionProviderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GGPMockOpenSessionProviderServiceClient : System.ServiceModel.ClientBase<GGPMockBootstrapper.OpenSessionProviderService.IGGPMockOpenSessionProviderService>, GGPMockBootstrapper.OpenSessionProviderService.IGGPMockOpenSessionProviderService {
        
        public GGPMockOpenSessionProviderServiceClient() {
        }
        
        public GGPMockOpenSessionProviderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GGPMockOpenSessionProviderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GGPMockOpenSessionProviderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GGPMockOpenSessionProviderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GGPMockBootstrapper.OpenSessionProviderService.GetOpenSessionResponse[] GetOpenSessions(GGPMockBootstrapper.OpenSessionProviderService.GetOpenSessionRequest request) {
            return base.Channel.GetOpenSessions(request);
        }
        
        public void LoadDisconnection(GGPMockBootstrapper.OpenSessionProviderService.LoadDisconnectionRequest request) {
            base.Channel.LoadDisconnection(request);
        }
        
        public void GetOptions() {
            base.Channel.GetOptions();
        }
    }
}
