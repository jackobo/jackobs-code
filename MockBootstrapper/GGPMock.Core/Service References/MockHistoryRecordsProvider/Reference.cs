//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GGPMockBootstrapper.MockHistoryRecordsProvider {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HistoryRecord", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock.History" +
        "")]
    [System.SerializableAttribute()]
    public partial class HistoryRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateAndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GGPMockBootstrapper.MockHistoryRecordsProvider.GameHistory GameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GGPMockBootstrapper.MockHistoryRecordsProvider.RoundHistory[] RoundsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GGPMockBootstrapper.MockHistoryRecordsProvider.SimplifiedHistoryMockData SimplifiedHistoryDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateAndTime {
            get {
                return this.DateAndTimeField;
            }
            set {
                if ((this.DateAndTimeField.Equals(value) != true)) {
                    this.DateAndTimeField = value;
                    this.RaisePropertyChanged("DateAndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GGPMockBootstrapper.MockHistoryRecordsProvider.GameHistory Game {
            get {
                return this.GameField;
            }
            set {
                if ((object.ReferenceEquals(this.GameField, value) != true)) {
                    this.GameField = value;
                    this.RaisePropertyChanged("Game");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GGPMockBootstrapper.MockHistoryRecordsProvider.RoundHistory[] Rounds {
            get {
                return this.RoundsField;
            }
            set {
                if ((object.ReferenceEquals(this.RoundsField, value) != true)) {
                    this.RoundsField = value;
                    this.RaisePropertyChanged("Rounds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GGPMockBootstrapper.MockHistoryRecordsProvider.SimplifiedHistoryMockData SimplifiedHistoryData {
            get {
                return this.SimplifiedHistoryDataField;
            }
            set {
                if ((object.ReferenceEquals(this.SimplifiedHistoryDataField, value) != true)) {
                    this.SimplifiedHistoryDataField = value;
                    this.RaisePropertyChanged("SimplifiedHistoryData");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameHistory", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock.History" +
        "")]
    [System.SerializableAttribute()]
    public partial class GameHistory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GameCurrencyCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GameDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long GameIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GameTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OperatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long RoundsCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServerIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GameCurrencyCode {
            get {
                return this.GameCurrencyCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.GameCurrencyCodeField, value) != true)) {
                    this.GameCurrencyCodeField = value;
                    this.RaisePropertyChanged("GameCurrencyCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GameData {
            get {
                return this.GameDataField;
            }
            set {
                if ((object.ReferenceEquals(this.GameDataField, value) != true)) {
                    this.GameDataField = value;
                    this.RaisePropertyChanged("GameData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long GameID {
            get {
                return this.GameIDField;
            }
            set {
                if ((this.GameIDField.Equals(value) != true)) {
                    this.GameIDField = value;
                    this.RaisePropertyChanged("GameID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GameType {
            get {
                return this.GameTypeField;
            }
            set {
                if ((this.GameTypeField.Equals(value) != true)) {
                    this.GameTypeField = value;
                    this.RaisePropertyChanged("GameType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OperatorId {
            get {
                return this.OperatorIdField;
            }
            set {
                if ((this.OperatorIdField.Equals(value) != true)) {
                    this.OperatorIdField = value;
                    this.RaisePropertyChanged("OperatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long RoundsCount {
            get {
                return this.RoundsCountField;
            }
            set {
                if ((this.RoundsCountField.Equals(value) != true)) {
                    this.RoundsCountField = value;
                    this.RaisePropertyChanged("RoundsCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServerID {
            get {
                return this.ServerIDField;
            }
            set {
                if ((this.ServerIDField.Equals(value) != true)) {
                    this.ServerIDField = value;
                    this.RaisePropertyChanged("ServerID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SimplifiedHistoryMockData", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock.History" +
        "")]
    [System.SerializableAttribute()]
    public partial class SimplifiedHistoryMockData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BetAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> FreePlayCurrentAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> FreePlayIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> FreePlayWinningAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long RealMoneyBalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> RealMoneyWinningsAmountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long BetAmount {
            get {
                return this.BetAmountField;
            }
            set {
                if ((this.BetAmountField.Equals(value) != true)) {
                    this.BetAmountField = value;
                    this.RaisePropertyChanged("BetAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> FreePlayCurrentAmount {
            get {
                return this.FreePlayCurrentAmountField;
            }
            set {
                if ((this.FreePlayCurrentAmountField.Equals(value) != true)) {
                    this.FreePlayCurrentAmountField = value;
                    this.RaisePropertyChanged("FreePlayCurrentAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> FreePlayID {
            get {
                return this.FreePlayIDField;
            }
            set {
                if ((this.FreePlayIDField.Equals(value) != true)) {
                    this.FreePlayIDField = value;
                    this.RaisePropertyChanged("FreePlayID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> FreePlayWinningAmount {
            get {
                return this.FreePlayWinningAmountField;
            }
            set {
                if ((this.FreePlayWinningAmountField.Equals(value) != true)) {
                    this.FreePlayWinningAmountField = value;
                    this.RaisePropertyChanged("FreePlayWinningAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long RealMoneyBalance {
            get {
                return this.RealMoneyBalanceField;
            }
            set {
                if ((this.RealMoneyBalanceField.Equals(value) != true)) {
                    this.RealMoneyBalanceField = value;
                    this.RaisePropertyChanged("RealMoneyBalance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> RealMoneyWinningsAmount {
            get {
                return this.RealMoneyWinningsAmountField;
            }
            set {
                if ((this.RealMoneyWinningsAmountField.Equals(value) != true)) {
                    this.RealMoneyWinningsAmountField = value;
                    this.RaisePropertyChanged("RealMoneyWinningsAmount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoundHistory", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock.History" +
        "")]
    [System.SerializableAttribute()]
    public partial class RoundHistory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GameHistoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long GameIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GameTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long RoundIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GameHistory {
            get {
                return this.GameHistoryField;
            }
            set {
                if ((object.ReferenceEquals(this.GameHistoryField, value) != true)) {
                    this.GameHistoryField = value;
                    this.RaisePropertyChanged("GameHistory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long GameID {
            get {
                return this.GameIDField;
            }
            set {
                if ((this.GameIDField.Equals(value) != true)) {
                    this.GameIDField = value;
                    this.RaisePropertyChanged("GameID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GameType {
            get {
                return this.GameTypeField;
            }
            set {
                if ((this.GameTypeField.Equals(value) != true)) {
                    this.GameTypeField = value;
                    this.RaisePropertyChanged("GameType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long RoundID {
            get {
                return this.RoundIDField;
            }
            set {
                if ((this.RoundIDField.Equals(value) != true)) {
                    this.RoundIDField = value;
                    this.RaisePropertyChanged("RoundID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MockHistoryRecordsProvider.IMockHistoryRecordsProvider")]
    public interface IMockHistoryRecordsProvider {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockHistoryRecordsProvider/GetAllRecords", ReplyAction="http://tempuri.org/IMockHistoryRecordsProvider/GetAllRecordsResponse")]
        GGPMockBootstrapper.MockHistoryRecordsProvider.HistoryRecord[] GetAllRecords();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockHistoryRecordsProvider/GetGameRecords", ReplyAction="http://tempuri.org/IMockHistoryRecordsProvider/GetGameRecordsResponse")]
        GGPMockBootstrapper.MockHistoryRecordsProvider.HistoryRecord[] GetGameRecords(long cid, int gameType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockHistoryRecordsProvider/ClearAllRecords", ReplyAction="http://tempuri.org/IMockHistoryRecordsProvider/ClearAllRecordsResponse")]
        void ClearAllRecords();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockHistoryRecordsProvider/ClearGameRecords", ReplyAction="http://tempuri.org/IMockHistoryRecordsProvider/ClearGameRecordsResponse")]
        void ClearGameRecords(int gameType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockHistoryRecordsProvider/LoadRecords", ReplyAction="http://tempuri.org/IMockHistoryRecordsProvider/LoadRecordsResponse")]
        void LoadRecords(GGPMockBootstrapper.MockHistoryRecordsProvider.HistoryRecord[] records);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMockHistoryRecordsProvider/RemoveRecord", ReplyAction="http://tempuri.org/IMockHistoryRecordsProvider/RemoveRecordResponse")]
        void RemoveRecord(long gameID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMockHistoryRecordsProviderChannel : GGPMockBootstrapper.MockHistoryRecordsProvider.IMockHistoryRecordsProvider, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MockHistoryRecordsProviderClient : System.ServiceModel.ClientBase<GGPMockBootstrapper.MockHistoryRecordsProvider.IMockHistoryRecordsProvider>, GGPMockBootstrapper.MockHistoryRecordsProvider.IMockHistoryRecordsProvider {
        
        public MockHistoryRecordsProviderClient() {
        }
        
        public MockHistoryRecordsProviderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MockHistoryRecordsProviderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MockHistoryRecordsProviderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MockHistoryRecordsProviderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GGPMockBootstrapper.MockHistoryRecordsProvider.HistoryRecord[] GetAllRecords() {
            return base.Channel.GetAllRecords();
        }
        
        public GGPMockBootstrapper.MockHistoryRecordsProvider.HistoryRecord[] GetGameRecords(long cid, int gameType) {
            return base.Channel.GetGameRecords(cid, gameType);
        }
        
        public void ClearAllRecords() {
            base.Channel.ClearAllRecords();
        }
        
        public void ClearGameRecords(int gameType) {
            base.Channel.ClearGameRecords(gameType);
        }
        
        public void LoadRecords(GGPMockBootstrapper.MockHistoryRecordsProvider.HistoryRecord[] records) {
            base.Channel.LoadRecords(records);
        }
        
        public void RemoveRecord(long gameID) {
            base.Channel.RemoveRecord(gameID);
        }
    }
}
