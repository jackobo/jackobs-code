//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GGPMockBootstrapper.GGPMockDataProvider {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetPlayerDataResponse", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock")]
    [System.SerializableAttribute()]
    public partial class GetPlayerDataResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GGPMockBootstrapper.GGPMockDataProvider.FreePlayStateMock[] FreePlayStatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GGPMockBootstrapper.GGPMockDataProvider.FreePlayTypeMock[] FreePlayTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GGPMockBootstrapper.GGPMockDataProvider.PlayerData MockDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GGPMockBootstrapper.GGPMockDataProvider.RegulationTypeMock[] SupportedRegulationsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GGPMockBootstrapper.GGPMockDataProvider.FreePlayStateMock[] FreePlayStates {
            get {
                return this.FreePlayStatesField;
            }
            set {
                if ((object.ReferenceEquals(this.FreePlayStatesField, value) != true)) {
                    this.FreePlayStatesField = value;
                    this.RaisePropertyChanged("FreePlayStates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GGPMockBootstrapper.GGPMockDataProvider.FreePlayTypeMock[] FreePlayTypes {
            get {
                return this.FreePlayTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.FreePlayTypesField, value) != true)) {
                    this.FreePlayTypesField = value;
                    this.RaisePropertyChanged("FreePlayTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GGPMockBootstrapper.GGPMockDataProvider.PlayerData MockData {
            get {
                return this.MockDataField;
            }
            set {
                if ((object.ReferenceEquals(this.MockDataField, value) != true)) {
                    this.MockDataField = value;
                    this.RaisePropertyChanged("MockData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GGPMockBootstrapper.GGPMockDataProvider.RegulationTypeMock[] SupportedRegulations {
            get {
                return this.SupportedRegulationsField;
            }
            set {
                if ((object.ReferenceEquals(this.SupportedRegulationsField, value) != true)) {
                    this.SupportedRegulationsField = value;
                    this.RaisePropertyChanged("SupportedRegulations");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerData", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock")]
    [System.SerializableAttribute()]
    public partial class PlayerData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GGPMockBootstrapper.GGPMockDataProvider.PlayerAttribute[] AttributesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BankrollCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EnableAutomaticRegulationSelectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GGPMockBootstrapper.GGPMockDataProvider.FreePlayMockData[] FreePlayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDefaultPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GGPMockBootstrapper.GGPMockDataProvider.ItalyRegulationMockData ItalyRegulationDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GGPMockBootstrapper.GGPMockDataProvider.JackpotMockData JackpotDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long RealMoneyBalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GGPMockBootstrapper.GGPMockDataProvider.RegulationTypeMock RegulationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GGPMockBootstrapper.GGPMockDataProvider.SpainRegulationMockData SpainRegulationDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GGPMockBootstrapper.GGPMockDataProvider.PlayerAttribute[] Attributes {
            get {
                return this.AttributesField;
            }
            set {
                if ((object.ReferenceEquals(this.AttributesField, value) != true)) {
                    this.AttributesField = value;
                    this.RaisePropertyChanged("Attributes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BankrollCurrency {
            get {
                return this.BankrollCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.BankrollCurrencyField, value) != true)) {
                    this.BankrollCurrencyField = value;
                    this.RaisePropertyChanged("BankrollCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CID {
            get {
                return this.CIDField;
            }
            set {
                if ((this.CIDField.Equals(value) != true)) {
                    this.CIDField = value;
                    this.RaisePropertyChanged("CID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EnableAutomaticRegulationSelection {
            get {
                return this.EnableAutomaticRegulationSelectionField;
            }
            set {
                if ((this.EnableAutomaticRegulationSelectionField.Equals(value) != true)) {
                    this.EnableAutomaticRegulationSelectionField = value;
                    this.RaisePropertyChanged("EnableAutomaticRegulationSelection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GGPMockBootstrapper.GGPMockDataProvider.FreePlayMockData[] FreePlay {
            get {
                return this.FreePlayField;
            }
            set {
                if ((object.ReferenceEquals(this.FreePlayField, value) != true)) {
                    this.FreePlayField = value;
                    this.RaisePropertyChanged("FreePlay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDefaultPlayer {
            get {
                return this.IsDefaultPlayerField;
            }
            set {
                if ((this.IsDefaultPlayerField.Equals(value) != true)) {
                    this.IsDefaultPlayerField = value;
                    this.RaisePropertyChanged("IsDefaultPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GGPMockBootstrapper.GGPMockDataProvider.ItalyRegulationMockData ItalyRegulationData {
            get {
                return this.ItalyRegulationDataField;
            }
            set {
                if ((object.ReferenceEquals(this.ItalyRegulationDataField, value) != true)) {
                    this.ItalyRegulationDataField = value;
                    this.RaisePropertyChanged("ItalyRegulationData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GGPMockBootstrapper.GGPMockDataProvider.JackpotMockData JackpotData {
            get {
                return this.JackpotDataField;
            }
            set {
                if ((object.ReferenceEquals(this.JackpotDataField, value) != true)) {
                    this.JackpotDataField = value;
                    this.RaisePropertyChanged("JackpotData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long RealMoneyBalance {
            get {
                return this.RealMoneyBalanceField;
            }
            set {
                if ((this.RealMoneyBalanceField.Equals(value) != true)) {
                    this.RealMoneyBalanceField = value;
                    this.RaisePropertyChanged("RealMoneyBalance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GGPMockBootstrapper.GGPMockDataProvider.RegulationTypeMock Regulation {
            get {
                return this.RegulationField;
            }
            set {
                if ((object.ReferenceEquals(this.RegulationField, value) != true)) {
                    this.RegulationField = value;
                    this.RaisePropertyChanged("Regulation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GGPMockBootstrapper.GGPMockDataProvider.SpainRegulationMockData SpainRegulationData {
            get {
                return this.SpainRegulationDataField;
            }
            set {
                if ((object.ReferenceEquals(this.SpainRegulationDataField, value) != true)) {
                    this.SpainRegulationDataField = value;
                    this.RaisePropertyChanged("SpainRegulationData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FreePlayStateMock", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock")]
    [System.SerializableAttribute()]
    public partial class FreePlayStateMock : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FreePlayTypeMock", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock")]
    [System.SerializableAttribute()]
    public partial class FreePlayTypeMock : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegulationTypeMock", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock")]
    [System.SerializableAttribute()]
    public partial class RegulationTypeMock : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultCurrencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultCurrency {
            get {
                return this.DefaultCurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultCurrencyField, value) != true)) {
                    this.DefaultCurrencyField = value;
                    this.RaisePropertyChanged("DefaultCurrency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItalyRegulationMockData", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock")]
    [System.SerializableAttribute()]
    public partial class ItalyRegulationMockData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long CurrentGameLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long MaxGameLimitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long CurrentGameLimit {
            get {
                return this.CurrentGameLimitField;
            }
            set {
                if ((this.CurrentGameLimitField.Equals(value) != true)) {
                    this.CurrentGameLimitField = value;
                    this.RaisePropertyChanged("CurrentGameLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MaxGameLimit {
            get {
                return this.MaxGameLimitField;
            }
            set {
                if ((this.MaxGameLimitField.Equals(value) != true)) {
                    this.MaxGameLimitField = value;
                    this.RaisePropertyChanged("MaxGameLimit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JackpotMockData", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock")]
    [System.SerializableAttribute()]
    public partial class JackpotMockData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double JackpotSeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double JackpotValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double JackpotSeed {
            get {
                return this.JackpotSeedField;
            }
            set {
                if ((this.JackpotSeedField.Equals(value) != true)) {
                    this.JackpotSeedField = value;
                    this.RaisePropertyChanged("JackpotSeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double JackpotValue {
            get {
                return this.JackpotValueField;
            }
            set {
                if ((this.JackpotValueField.Equals(value) != true)) {
                    this.JackpotValueField = value;
                    this.RaisePropertyChanged("JackpotValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpainRegulationMockData", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock")]
    [System.SerializableAttribute()]
    public partial class SpainRegulationMockData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long GameLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IntervalReminderInMinutesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long RequestedTimeLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long RestrictionPeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SessionDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TotalBetsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TotalWinsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long GameLimit {
            get {
                return this.GameLimitField;
            }
            set {
                if ((this.GameLimitField.Equals(value) != true)) {
                    this.GameLimitField = value;
                    this.RaisePropertyChanged("GameLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IntervalReminderInMinutes {
            get {
                return this.IntervalReminderInMinutesField;
            }
            set {
                if ((this.IntervalReminderInMinutesField.Equals(value) != true)) {
                    this.IntervalReminderInMinutesField = value;
                    this.RaisePropertyChanged("IntervalReminderInMinutes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long RequestedTimeLimit {
            get {
                return this.RequestedTimeLimitField;
            }
            set {
                if ((this.RequestedTimeLimitField.Equals(value) != true)) {
                    this.RequestedTimeLimitField = value;
                    this.RaisePropertyChanged("RequestedTimeLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long RestrictionPeriod {
            get {
                return this.RestrictionPeriodField;
            }
            set {
                if ((this.RestrictionPeriodField.Equals(value) != true)) {
                    this.RestrictionPeriodField = value;
                    this.RaisePropertyChanged("RestrictionPeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SessionDuration {
            get {
                return this.SessionDurationField;
            }
            set {
                if ((this.SessionDurationField.Equals(value) != true)) {
                    this.SessionDurationField = value;
                    this.RaisePropertyChanged("SessionDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalBets {
            get {
                return this.TotalBetsField;
            }
            set {
                if ((this.TotalBetsField.Equals(value) != true)) {
                    this.TotalBetsField = value;
                    this.RaisePropertyChanged("TotalBets");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalWins {
            get {
                return this.TotalWinsField;
            }
            set {
                if ((this.TotalWinsField.Equals(value) != true)) {
                    this.TotalWinsField = value;
                    this.RaisePropertyChanged("TotalWins");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerAttribute", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock")]
    [System.SerializableAttribute()]
    public partial class PlayerAttribute : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GGPMockBootstrapper.GGPMockDataProvider.AccountAttributeType AttributeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GGPMockBootstrapper.GGPMockDataProvider.AccountAttributeType AttributeType {
            get {
                return this.AttributeTypeField;
            }
            set {
                if ((this.AttributeTypeField.Equals(value) != true)) {
                    this.AttributeTypeField = value;
                    this.RaisePropertyChanged("AttributeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FreePlayMockData", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock")]
    [System.SerializableAttribute()]
    public partial class FreePlayMockData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] AlternativeGamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long BalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExpirationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> FreePlayIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GGPMockBootstrapper.GGPMockDataProvider.FreePlayStateMock FreePlayStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FreePlayTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] GamesTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long MaxBetAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> MaxWinningCapField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TotalWinningsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] AlternativeGames {
            get {
                return this.AlternativeGamesField;
            }
            set {
                if ((object.ReferenceEquals(this.AlternativeGamesField, value) != true)) {
                    this.AlternativeGamesField = value;
                    this.RaisePropertyChanged("AlternativeGames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExpirationDate {
            get {
                return this.ExpirationDateField;
            }
            set {
                if ((this.ExpirationDateField.Equals(value) != true)) {
                    this.ExpirationDateField = value;
                    this.RaisePropertyChanged("ExpirationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> FreePlayID {
            get {
                return this.FreePlayIDField;
            }
            set {
                if ((this.FreePlayIDField.Equals(value) != true)) {
                    this.FreePlayIDField = value;
                    this.RaisePropertyChanged("FreePlayID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GGPMockBootstrapper.GGPMockDataProvider.FreePlayStateMock FreePlayState {
            get {
                return this.FreePlayStateField;
            }
            set {
                if ((object.ReferenceEquals(this.FreePlayStateField, value) != true)) {
                    this.FreePlayStateField = value;
                    this.RaisePropertyChanged("FreePlayState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FreePlayType {
            get {
                return this.FreePlayTypeField;
            }
            set {
                if ((this.FreePlayTypeField.Equals(value) != true)) {
                    this.FreePlayTypeField = value;
                    this.RaisePropertyChanged("FreePlayType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] GamesTypes {
            get {
                return this.GamesTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.GamesTypesField, value) != true)) {
                    this.GamesTypesField = value;
                    this.RaisePropertyChanged("GamesTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MaxBetAmount {
            get {
                return this.MaxBetAmountField;
            }
            set {
                if ((this.MaxBetAmountField.Equals(value) != true)) {
                    this.MaxBetAmountField = value;
                    this.RaisePropertyChanged("MaxBetAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> MaxWinningCap {
            get {
                return this.MaxWinningCapField;
            }
            set {
                if ((this.MaxWinningCapField.Equals(value) != true)) {
                    this.MaxWinningCapField = value;
                    this.RaisePropertyChanged("MaxWinningCap");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalWinnings {
            get {
                return this.TotalWinningsField;
            }
            set {
                if ((this.TotalWinningsField.Equals(value) != true)) {
                    this.TotalWinningsField = value;
                    this.RaisePropertyChanged("TotalWinnings");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountAttributeType", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock")]
    public enum AccountAttributeType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CountryID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GenderId = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsNTSUser = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OrigCid = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VipTable = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VipLogo = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsChatDenied = 44,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FTDOrientationId = 45,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ClientTypeId = 46,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TaxId = 47,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        P2PPlayerType = 48,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RegulationStatusID = 49,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DaysToUploadDocument = 50,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SnapSELimit = 51,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PatronProfile = 52,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RegistrationStatusId = 53,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsTestAccount = 54,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayerJoinDate = 55,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RegistrationCountry = 56,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DateOfBirth = 57,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LanguageMock", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock")]
    [System.SerializableAttribute()]
    public partial class LanguageMock : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Iso2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Iso3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Iso2 {
            get {
                return this.Iso2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Iso2Field, value) != true)) {
                    this.Iso2Field = value;
                    this.RaisePropertyChanged("Iso2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Iso3 {
            get {
                return this.Iso3Field;
            }
            set {
                if ((object.ReferenceEquals(this.Iso3Field, value) != true)) {
                    this.Iso3Field = value;
                    this.RaisePropertyChanged("Iso3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AvailablePlayer", Namespace="http://schemas.datacontract.org/2004/07/GGPGameServer.Simulations.GGPMock")]
    [System.SerializableAttribute()]
    public partial class AvailablePlayer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CID {
            get {
                return this.CIDField;
            }
            set {
                if ((this.CIDField.Equals(value) != true)) {
                    this.CIDField = value;
                    this.RaisePropertyChanged("CID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GGPMockDataProvider.IGGPMockSupportService", CallbackContract=typeof(GGPMockBootstrapper.GGPMockDataProvider.IGGPMockSupportServiceCallback))]
    public interface IGGPMockSupportService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGGPMockSupportService/IsAlive", ReplyAction="http://tempuri.org/IGGPMockSupportService/IsAliveResponse")]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGGPMockSupportService/SubscribeForPlayerChanges", ReplyAction="http://tempuri.org/IGGPMockSupportService/SubscribeForPlayerChangesResponse")]
        System.Guid SubscribeForPlayerChanges(int cid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGGPMockSupportService/UnsubscribeFromPlayerChanges", ReplyAction="http://tempuri.org/IGGPMockSupportService/UnsubscribeFromPlayerChangesResponse")]
        void UnsubscribeFromPlayerChanges(int cid, System.Guid subscriptionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGGPMockSupportService/SubscribeForPlayersListChanges", ReplyAction="http://tempuri.org/IGGPMockSupportService/SubscribeForPlayersListChangesResponse")]
        System.Guid SubscribeForPlayersListChanges();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGGPMockSupportService/UnsubscribeFromPlayersListChanges", ReplyAction="http://tempuri.org/IGGPMockSupportService/UnsubscribeFromPlayersListChangesRespon" +
            "se")]
        void UnsubscribeFromPlayersListChanges(System.Guid subscriptionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGGPMockSupportService/GetPlayerData", ReplyAction="http://tempuri.org/IGGPMockSupportService/GetPlayerDataResponse")]
        GGPMockBootstrapper.GGPMockDataProvider.GetPlayerDataResponse GetPlayerData(int cid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGGPMockSupportService/FindPlayer", ReplyAction="http://tempuri.org/IGGPMockSupportService/FindPlayerResponse")]
        GGPMockBootstrapper.GGPMockDataProvider.PlayerData FindPlayer(string usernNameOrCid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGGPMockSupportService/UpdateMockData", ReplyAction="http://tempuri.org/IGGPMockSupportService/UpdateMockDataResponse")]
        void UpdateMockData(GGPMockBootstrapper.GGPMockDataProvider.PlayerData mockData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGGPMockSupportService/GetLanguages", ReplyAction="http://tempuri.org/IGGPMockSupportService/GetLanguagesResponse")]
        GGPMockBootstrapper.GGPMockDataProvider.LanguageMock[] GetLanguages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGGPMockSupportService/GetAvailablePlayers", ReplyAction="http://tempuri.org/IGGPMockSupportService/GetAvailablePlayersResponse")]
        GGPMockBootstrapper.GGPMockDataProvider.AvailablePlayer[] GetAvailablePlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGGPMockSupportService/CreatePlayerFromCid", ReplyAction="http://tempuri.org/IGGPMockSupportService/CreatePlayerFromCidResponse")]
        GGPMockBootstrapper.GGPMockDataProvider.PlayerData CreatePlayerFromCid(int cid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGGPMockSupportService/CreatePlayerFromCidAndUserName", ReplyAction="http://tempuri.org/IGGPMockSupportService/CreatePlayerFromCidAndUserNameResponse")]
        GGPMockBootstrapper.GGPMockDataProvider.PlayerData CreatePlayerFromCidAndUserName(int cid, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGGPMockSupportService/CreatePlayerFromUserName", ReplyAction="http://tempuri.org/IGGPMockSupportService/CreatePlayerFromUserNameResponse")]
        GGPMockBootstrapper.GGPMockDataProvider.PlayerData CreatePlayerFromUserName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGGPMockSupportService/DeletePlayer", ReplyAction="http://tempuri.org/IGGPMockSupportService/DeletePlayerResponse")]
        bool DeletePlayer(int cid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGGPMockSupportServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGGPMockSupportService/OnGGPMockDataChanged")]
        void OnGGPMockDataChanged(GGPMockBootstrapper.GGPMockDataProvider.PlayerData mockData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGGPMockSupportService/OnAvailablePlayersChanged")]
        void OnAvailablePlayersChanged(GGPMockBootstrapper.GGPMockDataProvider.AvailablePlayer[] availablePlayers);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGGPMockSupportServiceChannel : GGPMockBootstrapper.GGPMockDataProvider.IGGPMockSupportService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GGPMockSupportServiceClient : System.ServiceModel.DuplexClientBase<GGPMockBootstrapper.GGPMockDataProvider.IGGPMockSupportService>, GGPMockBootstrapper.GGPMockDataProvider.IGGPMockSupportService {
        
        public GGPMockSupportServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GGPMockSupportServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GGPMockSupportServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GGPMockSupportServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GGPMockSupportServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public System.Guid SubscribeForPlayerChanges(int cid) {
            return base.Channel.SubscribeForPlayerChanges(cid);
        }
        
        public void UnsubscribeFromPlayerChanges(int cid, System.Guid subscriptionID) {
            base.Channel.UnsubscribeFromPlayerChanges(cid, subscriptionID);
        }
        
        public System.Guid SubscribeForPlayersListChanges() {
            return base.Channel.SubscribeForPlayersListChanges();
        }
        
        public void UnsubscribeFromPlayersListChanges(System.Guid subscriptionID) {
            base.Channel.UnsubscribeFromPlayersListChanges(subscriptionID);
        }
        
        public GGPMockBootstrapper.GGPMockDataProvider.GetPlayerDataResponse GetPlayerData(int cid) {
            return base.Channel.GetPlayerData(cid);
        }
        
        public GGPMockBootstrapper.GGPMockDataProvider.PlayerData FindPlayer(string usernNameOrCid) {
            return base.Channel.FindPlayer(usernNameOrCid);
        }
        
        public void UpdateMockData(GGPMockBootstrapper.GGPMockDataProvider.PlayerData mockData) {
            base.Channel.UpdateMockData(mockData);
        }
        
        public GGPMockBootstrapper.GGPMockDataProvider.LanguageMock[] GetLanguages() {
            return base.Channel.GetLanguages();
        }
        
        public GGPMockBootstrapper.GGPMockDataProvider.AvailablePlayer[] GetAvailablePlayers() {
            return base.Channel.GetAvailablePlayers();
        }
        
        public GGPMockBootstrapper.GGPMockDataProvider.PlayerData CreatePlayerFromCid(int cid) {
            return base.Channel.CreatePlayerFromCid(cid);
        }
        
        public GGPMockBootstrapper.GGPMockDataProvider.PlayerData CreatePlayerFromCidAndUserName(int cid, string userName) {
            return base.Channel.CreatePlayerFromCidAndUserName(cid, userName);
        }
        
        public GGPMockBootstrapper.GGPMockDataProvider.PlayerData CreatePlayerFromUserName(string userName) {
            return base.Channel.CreatePlayerFromUserName(userName);
        }
        
        public bool DeletePlayer(int cid) {
            return base.Channel.DeletePlayer(cid);
        }
    }
}
