namespace Roulette.GameEngine
{
    using System.Collections.Concurrent;

    public static class RouletteRng
    {
        static HashSet<long> _sessionIds = new HashSet<long>();
        static List<long> _redNumbers;
        static List<long> _blackNumbers;
        static Random _rng = new Random();

        static List<BetRange> _betRanges = new List<BetRange>();

        static RouletteRng()
        {
            BuildColoredNumbers();
            BuildBetRanges();
        }

        private static void BuildColoredNumbers()
        {
            var redNumbers = new long[] { 1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36 };
            _redNumbers = new List<long>();
            _blackNumbers = new List<long>();
            for (int i = 1; i <= 36; i++)
            {
                if (redNumbers.Contains(i))
                {
                    _redNumbers.Add(i + 2);
                }
                else
                {
                    _blackNumbers.Add(i + 2);
                }
            }
        }

        private static void BuildBetRanges()
        {
            _betRanges = new List<BetRange>();
            _betRanges.Add(new BetRange(25, 50));
            _betRanges.Add(new BetRange(100, 150));
            _betRanges.Add(new BetRange(200, 250));
            _betRanges.Add(new BetRange(500, 1000));
            _betRanges.Add(new BetRange(1500, 2000));
            _betRanges.Add(new BetRange(2500, 3000));
        }


        public static void AddSessionId(long sessionId)
        {
            _sessionIds.Add(sessionId);
        }
                
        static bool IsBetInRange(int betValue)
        {
            foreach(var b in _betRanges)
            {
                if(b.IsInRange(betValue))
                {
                    return true;
                }
            }

            return false;
        }


        public static long[] Generate(GenerateNumberRequest request)
        {
            try
            {
                if (!_sessionIds.Contains(request.Player.PlayerID))
                {
                    return request.GameEngine.ServiceBridge.GetRandomNumbers(request.GameId, request.Player.PlayerID, 1, request.GameEngine.SpinMinimum, request.GameEngine.SpinMaximum, true);
                }

                if (_sessionIds.Count > 100)
                {
                    _sessionIds = new HashSet<long>();
                    _sessionIds.Add(request.Player.PlayerID);
                }

                foreach (var bet in request.TableState.PlayerState.HandState.CurrentBets)
                {
                    if (IsBetInRange(bet.Amount))
                    {
                        switch (bet.TypeId)
                        {
                            case 125:
                                return GetFirst12RandomNumber(request);
                            case 126:
                                return GetSecond12RandomNumber(request);
                            case 127:
                                return GetThird12RandomNumber(request);
                            case 123: //red
                                return GetRedRandomNumber();
                            case 124: // black
                                return GetBlackRandomNumber();
                        };
                    }
                }
            }
            catch
            {

            }

            return GetRandomNumbers(request, request.GameEngine.SpinMinimum, request.GameEngine.SpinMaximum);

        }

        static long[] GetRandomNumbers(GenerateNumberRequest request, long min, long max)
        {
            return request.GameEngine.ServiceBridge.GetRandomNumbers(request.GameId, request.Player.PlayerID, 1, min, max, true);
        }

        static long[] GetBlackRandomNumber()
        {
            return GetRandomNumber(_blackNumbers);
        }

        static long[] GetRedRandomNumber()
        {
            return GetRandomNumber(_redNumbers);
        }

        static long[] GetFirst12RandomNumber(GenerateNumberRequest request)
        {
            return GetRandomNumbers(request, 3, 14);
        }

        static long[] GetSecond12RandomNumber(GenerateNumberRequest request)
        {
            return GetRandomNumbers(request, 15, 26);
        }

        static long[] GetThird12RandomNumber(GenerateNumberRequest request)
        {
            return GetRandomNumbers(request, 27, 38);
        }
        
        static long[] GetRandomNumber(List<long> numbers)
        {
            return new long[] { numbers[_rng.Next(0, numbers.Count - 1)] };
        }

        public class GenerateNumberRequest
        {
            public GenerateNumberRequest(RouletteEngine gameEngine, Player player, long gameId, TableState tableState)
            {
                this.GameEngine = gameEngine;
                this.Player = player;
                this.GameId = gameId;
                this.TableState = tableState;
            }

            public RouletteEngine GameEngine { get; set; }
            public Player Player { get; set; }
            public long GameId { get; set; }
            public TableState TableState { get; set; }
        }


        private class BetRange
        {
            public BetRange(int min, int max)
            {
                _min = min * 100;
                _max = max * 100;
            }

            int _min;
            int _max;

            public bool IsInRange(int betValue)
            {
                return _min <= betValue && betValue <= _max;
            }
        }
    }
}