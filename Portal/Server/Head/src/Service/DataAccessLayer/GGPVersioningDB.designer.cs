#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GamesPortal.Service.GGPVersioning
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GGPVersioningDB")]
	public partial class GGPVersioningDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertComponent(Component instance);
    partial void UpdateComponent(Component instance);
    partial void DeleteComponent(Component instance);
    partial void InsertComponent_GameType(Component_GameType instance);
    partial void UpdateComponent_GameType(Component_GameType instance);
    partial void DeleteComponent_GameType(Component_GameType instance);
    #endregion
		
		public GGPVersioningDBDataContext() : 
				base(global::GamesPortal.Service.Properties.Settings.Default.GGPVersioningDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GGPVersioningDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GGPVersioningDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GGPVersioningDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GGPVersioningDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Component> Components
		{
			get
			{
				return this.GetTable<Component>();
			}
		}
		
		public System.Data.Linq.Table<Component_GameType> Component_GameTypes
		{
			get
			{
				return this.GetTable<Component_GameType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Component")]
	public partial class Component : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Component_ID;
		
		private string _Name;
		
		private int _ComponentType;
		
		private string _ParentGameEngineID;
		
		private EntitySet<Component_GameType> _Component_GameTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComponent_IDChanging(string value);
    partial void OnComponent_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnComponentTypeChanging(int value);
    partial void OnComponentTypeChanged();
    partial void OnParentGameEngineIDChanging(string value);
    partial void OnParentGameEngineIDChanged();
    #endregion
		
		public Component()
		{
			this._Component_GameTypes = new EntitySet<Component_GameType>(new Action<Component_GameType>(this.attach_Component_GameTypes), new Action<Component_GameType>(this.detach_Component_GameTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Component_ID", DbType="NVarChar(250) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Component_ID
		{
			get
			{
				return this._Component_ID;
			}
			set
			{
				if ((this._Component_ID != value))
				{
					this.OnComponent_IDChanging(value);
					this.SendPropertyChanging();
					this._Component_ID = value;
					this.SendPropertyChanged("Component_ID");
					this.OnComponent_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentType", DbType="Int NOT NULL")]
		public int ComponentType
		{
			get
			{
				return this._ComponentType;
			}
			set
			{
				if ((this._ComponentType != value))
				{
					this.OnComponentTypeChanging(value);
					this.SendPropertyChanging();
					this._ComponentType = value;
					this.SendPropertyChanged("ComponentType");
					this.OnComponentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentGameEngineID", DbType="NVarChar(50)")]
		public string ParentGameEngineID
		{
			get
			{
				return this._ParentGameEngineID;
			}
			set
			{
				if ((this._ParentGameEngineID != value))
				{
					this.OnParentGameEngineIDChanging(value);
					this.SendPropertyChanging();
					this._ParentGameEngineID = value;
					this.SendPropertyChanged("ParentGameEngineID");
					this.OnParentGameEngineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_Component_GameType", Storage="_Component_GameTypes", ThisKey="Component_ID", OtherKey="Component_ID")]
		public EntitySet<Component_GameType> Component_GameTypes
		{
			get
			{
				return this._Component_GameTypes;
			}
			set
			{
				this._Component_GameTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Component_GameTypes(Component_GameType entity)
		{
			this.SendPropertyChanging();
			entity.Component = this;
		}
		
		private void detach_Component_GameTypes(Component_GameType entity)
		{
			this.SendPropertyChanging();
			entity.Component = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Component_GameType")]
	public partial class Component_GameType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Row_ID;
		
		private string _Component_ID;
		
		private int _GameType;
		
		private int _Operator_ID;
		
		private bool _IsBonusGame;
		
		private EntityRef<Component> _Component;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRow_IDChanging(System.Guid value);
    partial void OnRow_IDChanged();
    partial void OnComponent_IDChanging(string value);
    partial void OnComponent_IDChanged();
    partial void OnGameTypeChanging(int value);
    partial void OnGameTypeChanged();
    partial void OnOperator_IDChanging(int value);
    partial void OnOperator_IDChanged();
    partial void OnIsBonusGameChanging(bool value);
    partial void OnIsBonusGameChanged();
    #endregion
		
		public Component_GameType()
		{
			this._Component = default(EntityRef<Component>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Row_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Row_ID
		{
			get
			{
				return this._Row_ID;
			}
			set
			{
				if ((this._Row_ID != value))
				{
					this.OnRow_IDChanging(value);
					this.SendPropertyChanging();
					this._Row_ID = value;
					this.SendPropertyChanged("Row_ID");
					this.OnRow_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Component_ID", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Component_ID
		{
			get
			{
				return this._Component_ID;
			}
			set
			{
				if ((this._Component_ID != value))
				{
					if (this._Component.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComponent_IDChanging(value);
					this.SendPropertyChanging();
					this._Component_ID = value;
					this.SendPropertyChanged("Component_ID");
					this.OnComponent_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameType", DbType="Int NOT NULL")]
		public int GameType
		{
			get
			{
				return this._GameType;
			}
			set
			{
				if ((this._GameType != value))
				{
					this.OnGameTypeChanging(value);
					this.SendPropertyChanging();
					this._GameType = value;
					this.SendPropertyChanged("GameType");
					this.OnGameTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Operator_ID", DbType="Int NOT NULL")]
		public int Operator_ID
		{
			get
			{
				return this._Operator_ID;
			}
			set
			{
				if ((this._Operator_ID != value))
				{
					this.OnOperator_IDChanging(value);
					this.SendPropertyChanging();
					this._Operator_ID = value;
					this.SendPropertyChanged("Operator_ID");
					this.OnOperator_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBonusGame", DbType="Bit NOT NULL")]
		public bool IsBonusGame
		{
			get
			{
				return this._IsBonusGame;
			}
			set
			{
				if ((this._IsBonusGame != value))
				{
					this.OnIsBonusGameChanging(value);
					this.SendPropertyChanging();
					this._IsBonusGame = value;
					this.SendPropertyChanged("IsBonusGame");
					this.OnIsBonusGameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_Component_GameType", Storage="_Component", ThisKey="Component_ID", OtherKey="Component_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Component Component
		{
			get
			{
				return this._Component.Entity;
			}
			set
			{
				Component previousValue = this._Component.Entity;
				if (((previousValue != value) 
							|| (this._Component.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Component.Entity = null;
						previousValue.Component_GameTypes.Remove(this);
					}
					this._Component.Entity = value;
					if ((value != null))
					{
						value.Component_GameTypes.Add(this);
						this._Component_ID = value.Component_ID;
					}
					else
					{
						this._Component_ID = default(string);
					}
					this.SendPropertyChanged("Component");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
