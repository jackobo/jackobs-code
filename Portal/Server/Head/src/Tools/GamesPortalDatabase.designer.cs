#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tools
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GamesPortalDEV")]
	public partial class GamesPortalDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRegulationType(RegulationType instance);
    partial void UpdateRegulationType(RegulationType instance);
    partial void DeleteRegulationType(RegulationType instance);
    partial void InsertRegulationType_MandatoryLanguage(RegulationType_MandatoryLanguage instance);
    partial void UpdateRegulationType_MandatoryLanguage(RegulationType_MandatoryLanguage instance);
    partial void DeleteRegulationType_MandatoryLanguage(RegulationType_MandatoryLanguage instance);
    #endregion
		
		public GamesPortalDatabaseDataContext() : 
				base(global::Tools.Properties.Settings.Default.GamesPortalDB, mappingSource)
		{
			OnCreated();
		}
		
		public GamesPortalDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GamesPortalDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GamesPortalDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GamesPortalDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<RegulationType> RegulationTypes
		{
			get
			{
				return this.GetTable<RegulationType>();
			}
		}
		
		public System.Data.Linq.Table<RegulationType_MandatoryLanguage> RegulationType_MandatoryLanguages
		{
			get
			{
				return this.GetTable<RegulationType_MandatoryLanguage>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RegulationType")]
	public partial class RegulationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegulationType_ID;
		
		private string _RegulationName;
		
		private EntitySet<RegulationType_MandatoryLanguage> _RegulationType_MandatoryLanguages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegulationType_IDChanging(int value);
    partial void OnRegulationType_IDChanged();
    partial void OnRegulationNameChanging(string value);
    partial void OnRegulationNameChanged();
    #endregion
		
		public RegulationType()
		{
			this._RegulationType_MandatoryLanguages = new EntitySet<RegulationType_MandatoryLanguage>(new Action<RegulationType_MandatoryLanguage>(this.attach_RegulationType_MandatoryLanguages), new Action<RegulationType_MandatoryLanguage>(this.detach_RegulationType_MandatoryLanguages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegulationType_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RegulationType_ID
		{
			get
			{
				return this._RegulationType_ID;
			}
			set
			{
				if ((this._RegulationType_ID != value))
				{
					this.OnRegulationType_IDChanging(value);
					this.SendPropertyChanging();
					this._RegulationType_ID = value;
					this.SendPropertyChanged("RegulationType_ID");
					this.OnRegulationType_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegulationName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RegulationName
		{
			get
			{
				return this._RegulationName;
			}
			set
			{
				if ((this._RegulationName != value))
				{
					this.OnRegulationNameChanging(value);
					this.SendPropertyChanging();
					this._RegulationName = value;
					this.SendPropertyChanged("RegulationName");
					this.OnRegulationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegulationType_RegulationType_MandatoryLanguage", Storage="_RegulationType_MandatoryLanguages", ThisKey="RegulationType_ID", OtherKey="RegulationType_ID")]
		public EntitySet<RegulationType_MandatoryLanguage> RegulationType_MandatoryLanguages
		{
			get
			{
				return this._RegulationType_MandatoryLanguages;
			}
			set
			{
				this._RegulationType_MandatoryLanguages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RegulationType_MandatoryLanguages(RegulationType_MandatoryLanguage entity)
		{
			this.SendPropertyChanging();
			entity.RegulationType = this;
		}
		
		private void detach_RegulationType_MandatoryLanguages(RegulationType_MandatoryLanguage entity)
		{
			this.SendPropertyChanging();
			entity.RegulationType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RegulationType_MandatoryLanguage")]
	public partial class RegulationType_MandatoryLanguage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegulationTypeLanguage_ID;
		
		private int _RegulationType_ID;
		
		private string _LanguageIso3;
		
		private EntityRef<RegulationType> _RegulationType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegulationTypeLanguage_IDChanging(int value);
    partial void OnRegulationTypeLanguage_IDChanged();
    partial void OnRegulationType_IDChanging(int value);
    partial void OnRegulationType_IDChanged();
    partial void OnLanguageIso3Changing(string value);
    partial void OnLanguageIso3Changed();
    #endregion
		
		public RegulationType_MandatoryLanguage()
		{
			this._RegulationType = default(EntityRef<RegulationType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegulationTypeLanguage_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RegulationTypeLanguage_ID
		{
			get
			{
				return this._RegulationTypeLanguage_ID;
			}
			set
			{
				if ((this._RegulationTypeLanguage_ID != value))
				{
					this.OnRegulationTypeLanguage_IDChanging(value);
					this.SendPropertyChanging();
					this._RegulationTypeLanguage_ID = value;
					this.SendPropertyChanged("RegulationTypeLanguage_ID");
					this.OnRegulationTypeLanguage_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegulationType_ID", DbType="Int NOT NULL")]
		public int RegulationType_ID
		{
			get
			{
				return this._RegulationType_ID;
			}
			set
			{
				if ((this._RegulationType_ID != value))
				{
					if (this._RegulationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegulationType_IDChanging(value);
					this.SendPropertyChanging();
					this._RegulationType_ID = value;
					this.SendPropertyChanged("RegulationType_ID");
					this.OnRegulationType_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageIso3", DbType="NVarChar(3) NOT NULL", CanBeNull=false)]
		public string LanguageIso3
		{
			get
			{
				return this._LanguageIso3;
			}
			set
			{
				if ((this._LanguageIso3 != value))
				{
					this.OnLanguageIso3Changing(value);
					this.SendPropertyChanging();
					this._LanguageIso3 = value;
					this.SendPropertyChanged("LanguageIso3");
					this.OnLanguageIso3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegulationType_RegulationType_MandatoryLanguage", Storage="_RegulationType", ThisKey="RegulationType_ID", OtherKey="RegulationType_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RegulationType RegulationType
		{
			get
			{
				return this._RegulationType.Entity;
			}
			set
			{
				RegulationType previousValue = this._RegulationType.Entity;
				if (((previousValue != value) 
							|| (this._RegulationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegulationType.Entity = null;
						previousValue.RegulationType_MandatoryLanguages.Remove(this);
					}
					this._RegulationType.Entity = value;
					if ((value != null))
					{
						value.RegulationType_MandatoryLanguages.Add(this);
						this._RegulationType_ID = value.RegulationType_ID;
					}
					else
					{
						this._RegulationType_ID = default(int);
					}
					this.SendPropertyChanged("RegulationType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
