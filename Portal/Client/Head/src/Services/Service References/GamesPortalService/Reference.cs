//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GamesPortal.Client.Services.GamesPortalService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetAllGamesResponse", Namespace="http://schemas.datacontract.org/2004/07/GamesPortal.Service")]
    [System.SerializableAttribute()]
    public partial class GetAllGamesResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GamesPortal.Client.Services.GamesPortalService.GameEntity[] GamesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GamesPortal.Client.Services.GamesPortalService.GameEntity[] Games {
            get {
                return this.GamesField;
            }
            set {
                if ((object.ReferenceEquals(this.GamesField, value) != true)) {
                    this.GamesField = value;
                    this.RaisePropertyChanged("Games");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameEntity", Namespace="http://schemas.datacontract.org/2004/07/GamesPortal.Service.Entities")]
    [System.SerializableAttribute()]
    public partial class GameEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GamesPortal.Client.Services.GamesPortalService.GameTypeEntity[] GameTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsExternalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MainGameTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GamesPortal.Client.Services.GamesPortalService.GameTechnology[] SupportedTechnologiesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GamesPortal.Client.Services.GamesPortalService.GameTypeEntity[] GameTypes {
            get {
                return this.GameTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.GameTypesField, value) != true)) {
                    this.GameTypesField = value;
                    this.RaisePropertyChanged("GameTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsExternal {
            get {
                return this.IsExternalField;
            }
            set {
                if ((this.IsExternalField.Equals(value) != true)) {
                    this.IsExternalField = value;
                    this.RaisePropertyChanged("IsExternal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MainGameType {
            get {
                return this.MainGameTypeField;
            }
            set {
                if ((this.MainGameTypeField.Equals(value) != true)) {
                    this.MainGameTypeField = value;
                    this.RaisePropertyChanged("MainGameType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GamesPortal.Client.Services.GamesPortalService.GameTechnology[] SupportedTechnologies {
            get {
                return this.SupportedTechnologiesField;
            }
            set {
                if ((object.ReferenceEquals(this.SupportedTechnologiesField, value) != true)) {
                    this.SupportedTechnologiesField = value;
                    this.RaisePropertyChanged("SupportedTechnologies");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameTypeEntity", Namespace="http://schemas.datacontract.org/2004/07/GamesPortal.Service.Entities")]
    [System.SerializableAttribute()]
    public partial class GameTypeEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OperatorIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OperatorId {
            get {
                return this.OperatorIdField;
            }
            set {
                if ((this.OperatorIdField.Equals(value) != true)) {
                    this.OperatorIdField = value;
                    this.RaisePropertyChanged("OperatorId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameTechnology", Namespace="http://schemas.datacontract.org/2004/07/GamesPortal.Service.Entities")]
    public enum GameTechnology : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Flash = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Html5 = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetGameVersionsRequest", Namespace="http://schemas.datacontract.org/2004/07/GamesPortal.Service")]
    [System.SerializableAttribute()]
    public partial class GetGameVersionsRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid GameIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid GameID {
            get {
                return this.GameIDField;
            }
            set {
                if ((this.GameIDField.Equals(value) != true)) {
                    this.GameIDField = value;
                    this.RaisePropertyChanged("GameID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetGameVersionsResponse", Namespace="http://schemas.datacontract.org/2004/07/GamesPortal.Service")]
    [System.SerializableAttribute()]
    public partial class GetGameVersionsResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GamesPortal.Client.Services.GamesPortalService.GameVersionEntity[] GameVersionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GamesPortal.Client.Services.GamesPortalService.GameVersionEntity[] GameVersions {
            get {
                return this.GameVersionsField;
            }
            set {
                if ((object.ReferenceEquals(this.GameVersionsField, value) != true)) {
                    this.GameVersionsField = value;
                    this.RaisePropertyChanged("GameVersions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameVersionEntity", Namespace="http://schemas.datacontract.org/2004/07/GamesPortal.Service.Entities")]
    [System.SerializableAttribute()]
    public partial class GameVersionEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GamesPortal.Client.Services.GamesPortalService.GameVersionPropertyEntity[] PropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GamesPortal.Client.Services.GamesPortalService.GameVersionPropertyChangeHistoryEntity[] PropertiesChangeHistoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GamesPortal.Client.Services.GamesPortalService.GameTechnology TechnologyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TriggeredByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid VersionIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedByField, value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GamesPortal.Client.Services.GamesPortalService.GameVersionPropertyEntity[] Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GamesPortal.Client.Services.GamesPortalService.GameVersionPropertyChangeHistoryEntity[] PropertiesChangeHistory {
            get {
                return this.PropertiesChangeHistoryField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesChangeHistoryField, value) != true)) {
                    this.PropertiesChangeHistoryField = value;
                    this.RaisePropertyChanged("PropertiesChangeHistory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GamesPortal.Client.Services.GamesPortalService.GameTechnology Technology {
            get {
                return this.TechnologyField;
            }
            set {
                if ((this.TechnologyField.Equals(value) != true)) {
                    this.TechnologyField = value;
                    this.RaisePropertyChanged("Technology");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TriggeredBy {
            get {
                return this.TriggeredByField;
            }
            set {
                if ((object.ReferenceEquals(this.TriggeredByField, value) != true)) {
                    this.TriggeredByField = value;
                    this.RaisePropertyChanged("TriggeredBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid VersionId {
            get {
                return this.VersionIdField;
            }
            set {
                if ((this.VersionIdField.Equals(value) != true)) {
                    this.VersionIdField = value;
                    this.RaisePropertyChanged("VersionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameVersionPropertyEntity", Namespace="http://schemas.datacontract.org/2004/07/GamesPortal.Service.Entities")]
    [System.SerializableAttribute()]
    public partial class GameVersionPropertyEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegulationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Regulation {
            get {
                return this.RegulationField;
            }
            set {
                if ((object.ReferenceEquals(this.RegulationField, value) != true)) {
                    this.RegulationField = value;
                    this.RaisePropertyChanged("Regulation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameVersionPropertyChangeHistoryEntity", Namespace="http://schemas.datacontract.org/2004/07/GamesPortal.Service.Entities")]
    [System.SerializableAttribute()]
    public partial class GameVersionPropertyChangeHistoryEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ChangeDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChangeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChangedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NewValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OldValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegulationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ChangeDate {
            get {
                return this.ChangeDateField;
            }
            set {
                if ((this.ChangeDateField.Equals(value) != true)) {
                    this.ChangeDateField = value;
                    this.RaisePropertyChanged("ChangeDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChangeType {
            get {
                return this.ChangeTypeField;
            }
            set {
                if ((this.ChangeTypeField.Equals(value) != true)) {
                    this.ChangeTypeField = value;
                    this.RaisePropertyChanged("ChangeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChangedBy {
            get {
                return this.ChangedByField;
            }
            set {
                if ((object.ReferenceEquals(this.ChangedByField, value) != true)) {
                    this.ChangedByField = value;
                    this.RaisePropertyChanged("ChangedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NewValue {
            get {
                return this.NewValueField;
            }
            set {
                if ((object.ReferenceEquals(this.NewValueField, value) != true)) {
                    this.NewValueField = value;
                    this.RaisePropertyChanged("NewValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OldValue {
            get {
                return this.OldValueField;
            }
            set {
                if ((object.ReferenceEquals(this.OldValueField, value) != true)) {
                    this.OldValueField = value;
                    this.RaisePropertyChanged("OldValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyKey {
            get {
                return this.PropertyKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyKeyField, value) != true)) {
                    this.PropertyKeyField = value;
                    this.RaisePropertyChanged("PropertyKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Regulation {
            get {
                return this.RegulationField;
            }
            set {
                if ((object.ReferenceEquals(this.RegulationField, value) != true)) {
                    this.RegulationField = value;
                    this.RaisePropertyChanged("Regulation");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetLatestApprovedVersionForEachGameResponse", Namespace="http://schemas.datacontract.org/2004/07/GamesPortal.Service")]
    [System.SerializableAttribute()]
    public partial class GetLatestApprovedVersionForEachGameResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GamesPortal.Client.Services.GamesPortalService.LatestApprovedGameVersionEntity[] LatestApprovedGamesVersionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GamesPortal.Client.Services.GamesPortalService.LatestApprovedGameVersionEntity[] LatestApprovedGamesVersions {
            get {
                return this.LatestApprovedGamesVersionsField;
            }
            set {
                if ((object.ReferenceEquals(this.LatestApprovedGamesVersionsField, value) != true)) {
                    this.LatestApprovedGamesVersionsField = value;
                    this.RaisePropertyChanged("LatestApprovedGamesVersions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LatestApprovedGameVersionEntity", Namespace="http://schemas.datacontract.org/2004/07/GamesPortal.Service.Entities")]
    [System.SerializableAttribute()]
    public partial class LatestApprovedGameVersionEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GameNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid Game_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsExternalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MainGameTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PMApprovedVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QAApprovedVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegulationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TechnologyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientType {
            get {
                return this.ClientTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientTypeField, value) != true)) {
                    this.ClientTypeField = value;
                    this.RaisePropertyChanged("ClientType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GameName {
            get {
                return this.GameNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GameNameField, value) != true)) {
                    this.GameNameField = value;
                    this.RaisePropertyChanged("GameName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Game_ID {
            get {
                return this.Game_IDField;
            }
            set {
                if ((this.Game_IDField.Equals(value) != true)) {
                    this.Game_IDField = value;
                    this.RaisePropertyChanged("Game_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsExternal {
            get {
                return this.IsExternalField;
            }
            set {
                if ((this.IsExternalField.Equals(value) != true)) {
                    this.IsExternalField = value;
                    this.RaisePropertyChanged("IsExternal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastVersion {
            get {
                return this.LastVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.LastVersionField, value) != true)) {
                    this.LastVersionField = value;
                    this.RaisePropertyChanged("LastVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MainGameType {
            get {
                return this.MainGameTypeField;
            }
            set {
                if ((this.MainGameTypeField.Equals(value) != true)) {
                    this.MainGameTypeField = value;
                    this.RaisePropertyChanged("MainGameType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PMApprovedVersion {
            get {
                return this.PMApprovedVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.PMApprovedVersionField, value) != true)) {
                    this.PMApprovedVersionField = value;
                    this.RaisePropertyChanged("PMApprovedVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QAApprovedVersion {
            get {
                return this.QAApprovedVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.QAApprovedVersionField, value) != true)) {
                    this.QAApprovedVersionField = value;
                    this.RaisePropertyChanged("QAApprovedVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Regulation {
            get {
                return this.RegulationField;
            }
            set {
                if ((object.ReferenceEquals(this.RegulationField, value) != true)) {
                    this.RegulationField = value;
                    this.RaisePropertyChanged("Regulation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Technology {
            get {
                return this.TechnologyField;
            }
            set {
                if ((this.TechnologyField.Equals(value) != true)) {
                    this.TechnologyField = value;
                    this.RaisePropertyChanged("Technology");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResyncGamesRequest", Namespace="http://schemas.datacontract.org/2004/07/GamesPortal.Service")]
    [System.SerializableAttribute()]
    public partial class ResyncGamesRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExternalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] GameTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GamesPortal.Client.Services.GamesPortalService.GameTechnology TechnologyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool External {
            get {
                return this.ExternalField;
            }
            set {
                if ((this.ExternalField.Equals(value) != true)) {
                    this.ExternalField = value;
                    this.RaisePropertyChanged("External");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] GameTypes {
            get {
                return this.GameTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.GameTypesField, value) != true)) {
                    this.GameTypesField = value;
                    this.RaisePropertyChanged("GameTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GamesPortal.Client.Services.GamesPortalService.GameTechnology Technology {
            get {
                return this.TechnologyField;
            }
            set {
                if ((this.TechnologyField.Equals(value) != true)) {
                    this.TechnologyField = value;
                    this.RaisePropertyChanged("Technology");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GamesPortalService.IGamesPortalService")]
    public interface IGamesPortalService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamesPortalService/GetAllGames", ReplyAction="http://tempuri.org/IGamesPortalService/GetAllGamesResponse")]
        GamesPortal.Client.Services.GamesPortalService.GetAllGamesResponse GetAllGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamesPortalService/GetGameVersions", ReplyAction="http://tempuri.org/IGamesPortalService/GetGameVersionsResponse")]
        GamesPortal.Client.Services.GamesPortalService.GetGameVersionsResponse GetGameVersions(GamesPortal.Client.Services.GamesPortalService.GetGameVersionsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamesPortalService/GetLatestApprovedVersionForEachGame", ReplyAction="http://tempuri.org/IGamesPortalService/GetLatestApprovedVersionForEachGameRespons" +
            "e")]
        GamesPortal.Client.Services.GamesPortalService.GetLatestApprovedVersionForEachGameResponse GetLatestApprovedVersionForEachGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamesPortalService/ResyncGames", ReplyAction="http://tempuri.org/IGamesPortalService/ResyncGamesResponse")]
        void ResyncGames(GamesPortal.Client.Services.GamesPortalService.ResyncGamesRequest request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGamesPortalServiceChannel : GamesPortal.Client.Services.GamesPortalService.IGamesPortalService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GamesPortalServiceClient : System.ServiceModel.ClientBase<GamesPortal.Client.Services.GamesPortalService.IGamesPortalService>, GamesPortal.Client.Services.GamesPortalService.IGamesPortalService {
        
        public GamesPortalServiceClient() {
        }
        
        public GamesPortalServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GamesPortalServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GamesPortalServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GamesPortalServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GamesPortal.Client.Services.GamesPortalService.GetAllGamesResponse GetAllGames() {
            return base.Channel.GetAllGames();
        }
        
        public GamesPortal.Client.Services.GamesPortalService.GetGameVersionsResponse GetGameVersions(GamesPortal.Client.Services.GamesPortalService.GetGameVersionsRequest request) {
            return base.Channel.GetGameVersions(request);
        }
        
        public GamesPortal.Client.Services.GamesPortalService.GetLatestApprovedVersionForEachGameResponse GetLatestApprovedVersionForEachGame() {
            return base.Channel.GetLatestApprovedVersionForEachGame();
        }
        
        public void ResyncGames(GamesPortal.Client.Services.GamesPortalService.ResyncGamesRequest request) {
            base.Channel.ResyncGames(request);
        }
    }
}
